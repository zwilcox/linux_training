Question 1
1 / 1 pts
Corrupting a doubly linked list, which is subsequently used in an unlink operation, may lead to what type of exploitable construct? 
  Memory Disclosure 
  Base Pointer Overwrite 
  Saved RIP Overwrite 
Correct!
  Write-What-Where 
 
Question 2
1 / 1 pts
To improve performance, the heap manager maintains a series of lists called “bins”, which are designed to maximize speed of allocations and frees.

Which of the following answers are the names of those "bins"? (Select All That Apply)

  empty 
Correct!
  unsorted 
  sorted 
Correct!
  small 
Correct!
  large 
  slow 
  medium 
 
Question 3
1 / 1 pts
Which of the following are types of stack "canaries"? (Select All That Apply)
  Minor 
  Red 
Correct!
  Custom 
Correct!
  Null 
Correct!
  XOR 
 
Question 4
1 / 1 pts
Consider the following program:

  1 #include <unistd.h>
  2 #include <stdlib.h>
  3 #include <stdio.h>
  4 char* xor_msg(unsigned char* str);
  5 char* handle_msg(unsigned char* str) {
  6     char buf[128] = { 0 };
  7     sprintf(buf, "VULNER4BILITY RESE4RCHERS 4RE H4PPY PEOPLE %s", str);
  8     return xor_msg(buf);
  9 }
 10
 11 char* xor_msg(unsigned char* str) {
 12     char* src = str;
 13     while (*src != '\0') {
 14         *src = *src ^ 0x41;
 15         src++;
 16     }
 17     return str;
 18 }
 19
 20 int main(int argc, char* argv[]) {
 21     printf("%s\n", handle_msg((unsigned char*)argv[1]));
 22     return EXIT_SUCCESS;
 23 }
If you ran the program with an argv[1] buffer consisting of 200 "A" elements, which function would never return back to its intended location? (Assume that the compiler uses FPO and a minimal amount of stack space for each function)

  main 
Correct!
  handle_msg 
  xor_msg 
  sprintf 
 
Question 5
1 / 1 pts
1 #include <unistd.h>
2 #include <stdlib.h>
3 #include <stdio.h>
4 char* xor_msg(unsigned char* str);
5 char* handle_msg(unsigned char* str) {
6      char buf[128] = { 0 };
7      sprintf(buf, "VULNER4BILITY RESE4RCHERS 4RE H4PPY PEOPLE %s", str);
8      return xor_msg(buf);
9 } 
10
11 char* xor_msg(unsigned char* str) {
12      char* src = str;
13      while (*src != '\0') {
14           *src = *src ^ 0x41;
15           src++;
16      }
17      return str;
18 }
19
20 int main(int argc, char* argv[]) {
21      printf("%s\n", handle_msg((unsigned char*)argv[1]));
22      return EXIT_SUCCESS;
23 }
Consider the following objdump from the source code above.

 Your answer should be in 0x...hexadecimal format with no leading zeros.

00000000004011f3 xor_msg:
  4011f3:       55                      push   %rbp
  4011f4:       48 89 e5                mov    %rsp,%rbp
  4011f7:       48 89 7d e8             mov    %rdi,-0x18(%rbp)
  4011fb:       48 8b 45 e8             mov    -0x18(%rbp),%rax
  4011ff:       48 89 45 f8             mov    %rax,-0x8(%rbp)
  401203:       eb 17                   jmp    40121c xor_msg+0x29
  401205:       48 8b 45 f8             mov    -0x8(%rbp),%rax
  401209:       0f b6 00                movzbl (%rax),%eax
  40120c:       83 f0 41                xor    $0x41,%eax
  40120f:       89 c2                   mov    %eax,%edx
  401211:       48 8b 45 f8             mov    -0x8(%rbp),%rax
  401215:       88 10                   mov    %dl,(%rax)
  401217:       48 83 45 f8 01          addq   $0x1,-0x8(%rbp)
  40121c:       48 8b 45 f8             mov    -0x8(%rbp),%rax
  401220:       0f b6 00                movzbl (%rax),%eax
  401223:       84 c0                   test   %al,%al
  401225:       75 de                   jne    401205 xor_msg+0x12
  401227:       48 8b 45 e8             mov    -0x18(%rbp),%rax
  40122b:       5d                      pop    %rbp
  40122c:       c3                      retq

000000000040122d main:
  40122d:       55                      push   %rbp
  40122e:       48 89 e5                mov    %rsp,%rbp
  401231:       48 83 ec 10             sub    $0x10,%rsp
  401235:       89 7d fc                mov    %edi,-0x4(%rbp)
  401238:       48 89 75 f0             mov    %rsi,-0x10(%rbp)
  40123c:       48 8b 45 f0             mov    -0x10(%rbp),%rax
  401240:       48 83 c0 08             add    $0x8,%rax
  401244:       48 8b 00                mov    (%rax),%rax
  401247:       48 89 c7                mov    %rax,%rdi
  40124a:       e8 e7 fe ff ff          callq  401136 handle_msg
  40124f:       48 89 c7                mov    %rax,%rdi
  401252:       e8 d9 fd ff ff          callq  401030 puts@plt
  401257:       b8 00 00 00 00          mov    $0x0,%eax
  40125c:       c9                      leaveq
  40125d:       c3                      retq
  40125e:       66 90                   xchg   %ax,%ax

0000000000401136 handle_msg:
  401136:       55                      push   %rbp
  401137:       48 89 e5                mov    %rsp,%rbp
  40113a:       48 81 ec 90 00 00 00    sub    $0x90,%rsp
  401141:       48 89 bd 78 ff ff ff    mov    %rdi,-0x88(%rbp)
  401148:       48 c7 45 80 00 00 00    movq   $0x0,-0x80(%rbp)
  40114f:       00
  401150:       48 c7 45 88 00 00 00    movq   $0x0,-0x78(%rbp)
  401157:       00
  401158:       48 c7 45 90 00 00 00    movq   $0x0,-0x70(%rbp)
  40115f:       00
  401160:       48 c7 45 98 00 00 00    movq   $0x0,-0x68(%rbp)
  401167:       00
  401168:       48 c7 45 a0 00 00 00    movq   $0x0,-0x60(%rbp)
  40116f:       00
  401170:       48 c7 45 a8 00 00 00    movq   $0x0,-0x58(%rbp)
  401177:       00
  401178:       48 c7 45 b0 00 00 00    movq   $0x0,-0x50(%rbp)
  40117f:       00
  401180:       48 c7 45 b8 00 00 00    movq   $0x0,-0x48(%rbp)
  401187:       00
  401188:       48 c7 45 c0 00 00 00    movq   $0x0,-0x40(%rbp)
  40118f:       00
  401190:       48 c7 45 c8 00 00 00    movq   $0x0,-0x38(%rbp)
  401197:       00
  401198:       48 c7 45 d0 00 00 00    movq   $0x0,-0x30(%rbp)
  40119f:       00
  4011a0:       48 c7 45 d8 00 00 00    movq   $0x0,-0x28(%rbp)
  4011a7:       00
  4011a8:       48 c7 45 e0 00 00 00    movq   $0x0,-0x20(%rbp)
  4011af:       00
  4011b0:       48 c7 45 e8 00 00 00    movq   $0x0,-0x18(%rbp)
  4011b7:       00
  4011b8:       48 c7 45 f0 00 00 00    movq   $0x0,-0x10(%rbp)
  4011bf:       00
  4011c0:       48 c7 45 f8 00 00 00    movq   $0x0,-0x8(%rbp)
  4011c7:       00
  4011c8:       48 8b 95 78 ff ff ff    mov    -0x88(%rbp),%rdx
  4011cf:       48 8d 45 80             lea    -0x80(%rbp),%rax
  4011d3:       be 10 20 40 00          mov    $0x402010,%esi
  4011d8:       48 89 c7                mov    %rax,%rdi
  4011db:       b8 00 00 00 00          mov    $0x0,%eax
  4011e0:       e8 5b fe ff ff          callq  401040 sprintf@plt
  4011e5:       48 8d 45 80             lea    -0x80(%rbp),%rax
  4011e9:       48 89 c7                mov    %rax,%rdi
  4011ec:       e8 02 00 00 00          callq  4011f3 xor_msg
  4011f1:       c9                      leaveq
  4011f2:       c3                      retq

What is the first return address (assume no ASLR) that is overwritten by the overflow in the source code?

Correct!
0x40124f
Correct Answers
0x40124F 
0x40124f 
 
Question 6
1 / 1 pts
The below function's first argument points to user-controlled string data.
At address 0x402010 is the string "name: %s age: %d\n"
The user controlled string is "AAAAAAAAAAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFF"

(16 'A's, 8 'B's, 8 'C's, 8 'D's, 8 'E's, and 8 'F's)

What 8-bytes address will the function go to when returning?  Your answer should be in 0x...hexadecimal format.

0000000000401170 :
  401170:	55                   	push   rbp
  401171:	48 89 fd             	mov    rbp,rdi
  401174:	48 83 ec 20          	sub    rsp,0x20
  401178:	e8 b3 fe ff ff       	call   401030 <strlen@plt>
  40117d:	48 89 ee             	mov    rsi,rbp
  401180:	48 89 e7             	mov    rdi,rsp
  401183:	48 89 c2             	mov    rdx,rax
  401186:	e8 c5 fe ff ff       	call   401050 <memcpy@plt>
  40118b:	8b 54 24 10          	mov    edx,DWORD PTR [rsp+0x10]
  40118f:	48 89 e6             	mov    rsi,rsp
  401192:	31 c0                	xor    eax,eax
  401194:	bf 10 20 40 00       	mov    edi,0x402010
  401199:	e8 a2 fe ff ff       	call   401040 <printf@plt>
  40119e:	48 83 c4 20          	add    rsp,0x20
  4011a2:	5d                   	pop    rbp
  4011a3:	c3                   	ret 

Correct!
0x4545454545454545
Correct Answers
0x4545454545454545 